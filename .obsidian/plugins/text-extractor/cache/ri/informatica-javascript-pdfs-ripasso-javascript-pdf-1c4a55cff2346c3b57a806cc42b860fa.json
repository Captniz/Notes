{"path":".obsidian/plugins/text-extractor/cache/ri/informatica-javascript-pdfs-ripasso-javascript-pdf-1c4a55cff2346c3b57a806cc42b860fa.json","text":"Ripasso concetti base di JAVASCRIPT: tipi di dato dichiarazione di una variabile: esplicita, implicita <script> var v1=0; // dichiarazione esplicita v2=10; /* dichiarazione implicita crea e inizializza la variabile v2 con visibilità GLOBALE */ v1=v3; /* ERRORE non si può utilizzare una variabile non dichiarata */ </script> NOTA Una Variabile dichiarata ma non inizializzata assume il valore undefined. <script> var num1; alert(num1); </script> per contro 0 indica il valore numerico 0 <script> var num1; num1=0; </script> null indica l’assenza di un qualsiasi valore <script> var num1; num1=null; alert(num1); </script> direttiva 'use strict' per forzare la dichiarazione delle variabili porre la direttiva \"use strict” all’inizio di un codice javascript blocca l’esecuzione dello script in caso di variabili non dichiarate es. <script> \"use strict” num1=null; alert(num1); </script> scope di una variabile a differenza di altri linguaggi di programmazione una seconda definizione di variabile non nasconde la prima es. <script> \"use strict” var num1=10; if(true){ var num1=20; alert(num1); // visualizzerà 20 } alert(num1); // visualizzerà 20 </script> uso della parola chiave 'let' per limitare la visibilità di una variabile al blocco che la contiene es. <script> \"use strict\" var num1=10; alert(num1); // visualizzerà 10 if(true){ let num1=20; alert(num1); // visualizzerà 20 } alert(num1); // visualizzerà 10 </script> operatore di uguaglianza e di identità <script> var a = 33; var b = \"33\"; alert(x==y); // visualizza: true alert(x===y); // visualizza: false </script> conversione implicita tra tipi <script> alert('12' * 2); // visualizza: 24 alert('12' + 2); // visualizza:'122' per la regola precedente alert(1 + true); // visualizza: 2 </script> <script> alert('12' * 2); // visualizza: 24 alert('12' + 2); // visualizza:'122' per la regola precedente alert(1 + true); // visualizza: 2 </script> conversione esplicita tra tipi: Number(),String(),Boolean() <script> var num=123; Number(\"18\"); // 18 String(num); // \"123\" Boolean(2); // true </script> dichiarazione delle funzioni in javascript <script> function nomefunzione(listaparametri) { //istruzioni; } //--> </script> chiamata delle funzioni javascript dal codice javascript <script> function stampa(testo){ document.write(testo); stampa(“mivedi”); } </script> da eventi all’interno dei tag HTML <!DOCTYPE html> <html lang=\"it\"> <head> <script> function stampa(testo){ document.write(testo); } </script> </head> <body> <p>Premi il bottone per chiamare la funzione</p> <form> <input type = \"button\" onclick = \"stampa('Mi vedi')\" value = \"STAMPA\"> </form> </body> </html> gli array in javascript sono al pari di altri linguaggi un insieme ordinato di elementi MA -possono contenere dati di tipi diversi <script> var mioVettore = []; </script> -sono dinamici: non va dichiarata la lo dimensione massima la dimensione varia al variare degli elementi in esso memorizzati es. <!DOCTYPE html> <html lang=\"it\"> <head></head> <body> <script> var mioVettore = []; alert (mioVettore.length); // visualizza 0 mioVettore[0]=10; mioVettore[1]=15; mioVettore[2]=30; alert (mioVettore.length); //visualizza 3 </script> </body> </html> Scorrimento di un array <!DOCTYPE html> <html lang=\"it\"> <head></head> <body> <script> var v = []; for(var i=0; i<10; i++) v[i] = i; document.write('CICLO classico'+'<br>'); for(var i=0; i<10; i++) document.write(v[i]+'<br>'); document.write('CICLO FOR IN'+'<br>'); for(var i in v) document.write(v[i]+'<br>'); </script> </body> </html> come rimuovere elementi da un vettore FIFO <script> var vettore=[‘uno’,’due’,’tre’,’quattro’]; vettore.shift(); console.log(vettore); => [’due’,’tre’,’quattro’]; </script> LIFO <script> var vettore=['uno','due','tre','quattro']; vettore.pop(); console.log(vettore); // ['uno','due','tre']; </script> BYPOS <script> const fruits = [\"Banana\", \"Arancia\", \"Mela\", \"Pera\"]; // // delete // delete fruits[0]; //[\"Arancia\", \"Mela\", \"Pera\"] for(i in fruits) document.write(fruits[i]+' '); </script> <script> var vettore=['uno','due','tre','quattro','cinque']; vettore.splice(2,2); // splice(pos,num_element) console.log(vettore); // ['uno','due','cinque'] </script> array multidimensionali <script> // un array può contenere elementi array var myArray = [123, \"stringa\", [\"a\", \"b\", 99]]; // accedo al terzo elemento di myarray // essendo un array accedo poi al suo terzo elemento // novantanove vale quindi 99 var novantanove = myArray[2][2]; </script> <script> // // dichiarazione e inizializzazione CONTESTUALE di una matrice // var matrice = [[24, 13, 1], [48, 92, 17], [8, 56, 11]]; var quarantotto = matrice[1][0]; </script> array multidimensionali Creazione inizializzazione Scorrimento <!DOCTYPE html> <html lang=\"it\"> <head></head> <body> <script> var x = 0; var y = 0; // // creo un array vuoto // var mio_array = new Array(); // // creo la matrice //(come un array contenente elementi array) // for (x=0; x<10; x++) { // // creo un sotto array vuoto // per ogni elemento dell'array principale // mio_array[x] = new Array(); // assegno un valore all’elemento mio_array[x][y] for (y=0; y<10; y++) { mio_array[x][y]= y+(x*10) ; } } for (x=0; x<mio_array[0].length; x++) { for (y=0; y<mio_array[1].length; y++) { document.write(mio_array[x][y] + \" \"); } document.write(\"<br>\"); } </script> </body> </html> esempio di creazione e trasposizione di matrice <script> var m = new Array(); var N; function getRandomInt(min,max) { return parseInt((Math.random() * (max+1-min))+min); } function nuova(){ let i; N=10; for(i=0;i<N;i++){ m[i]=new Array(); } let j; for(i=0;i<N;i++){ for(j=0;j<N;j++){ m[i][j]=getRandomInt(10,100); } } } function visualizza(){ var str=\"\"; str+=\"<table>\"; let i,j; for(i=0;i<N;i++){ str+=\"<tr>\"; for(j=0;j<N;j++){ str+=\"<td>\"+m[i][j]+\"</td>\"; } str+=\"</tr>\"; } str+=\"</table>\"; // “manda” str contenente l’HTML TABLE nel tag avente id=”ris” document.getElementById(\"ris\").innerHTML=str; } function trasposta(){ let i,j; // creo una matrice locale denominata trasp let trasp = new Array(); for(i=0;i<N;i++){ trasp[i]=new Array(); } // eseguo la copia trasposta degli elementi della matrice m // nella matrice trasp for(i=0;i<N;i++){ for(j=0;j<N;j++){ trasp[i][j]=m[j][i]; } } // traspongo la matrice m // facendo una copia degli elementi della matrice trasp for(i=0;i<N;i++){ for(j=0;j<N;j++){ m[i][j]=trasp[i][j]; } } } </script> Gestione delle stringhe come array <html lang=\"it\"> <head></head> <body> <script> var miastringa = \"personaggio\"; var c ; c= miastringa[3]; // c=='s' // substr(pos,nElement) c= miastringa.substr(0,7); // c=='persona' alert(c); // visualizza 'persona' </script> </body> </html> Particolari array disponibili nel javascript document es. document.images[] document.images[0] referenzia la prima immagine della pagina document.images[0].src rappresenta la proprietà src della prima immagine che posso manipolare in javascript document.images[0].src=\"foto.jpg\"; generazione di numeri casuali in javascript <script> // // Math.random() : ritorna un numero tra 0 e <1 // // per ottenere un itervallo di valori compresi // tra un valore minimo e un valore massimo usare // la formula seguente // // Spiegazione // Parseint : fa un cast ad intero e quindi tronca i // ecimali // Math.random() : ritorna un numero tra 0 e <1 // se max=100 e min=0 // la formula (Math.random() * (max+1-min))+min // equivale a (Math.random() * 101) // che restituirà valori fra 0 e 100 // se max=100 e min=10 // la formula (Math.random() * (max+1-min))+min // equivale a (Math.random() * 91) // (che restituirà valori fra 0 e 90 ) + 10 // ossia valori fra 10 e 100 // // NB // attenzione all'uso delle parentesi per dare // precedenza a somma e sottrazioni // function getRandomInt(min,max) { return parseInt((Math.random() * (max+1-min))+min); } </script> gestione di un radio button HTML in Javascript usando document.forms.nomemiaform.nomemioradiobutton.value in HTML il radio button e’ quel particolare tipo di input in cui sono elencate più opzioni ma in cui è possibile selezionare una sola opzione In questo esempio si crea un radio button “colori” NB • name=”colori” specifica il nome del radio button • id=”id_bianco” o id=”id_rosso” o id=”id_verde” identificano l’opzione • value=”bianco” o value=”rosso” o value=”verde” identificano il valore che il radio button assume nel caso sia selezionata l’opzione con id=”bianco” o id=”rosso” o id=”verde” • label è l’etichetta da associare ad ogni opzione label e opzione si associano attraversio l’uso dello stesso id la FORM è quella sezione del codice HTML a cui è demandata la gestione dell’INPUT NB in una pagina ci possono essere più FORM a cui è possibile dare un nome per mezzo del tag name=”nomeform” <!DOCTYPE HTML> <html> <head> <title>Test Radio</title> <script> // // SOLUZIONE MIGLIORE // // si utilizzano qui le proprietà del DOM // in cui tutto viene convertito in una rappresentazione // ad oggetti: // document è la pagina // forms indica tutte le forms della pagina // miaform1 indica la form con attributo name=\"miaform1\" // colori identifica l'input con attributo name=\"colori\" // value ci permette di estrarre il valore selezionato function controlla_rb_usando_value(){ var colore = document.forms.miaform1.colori.value; alert(\"Radio Button Colore = \"+colore); } </script> </head> <body> <h1>Test Radio Button</h1> <div> <!-- FORM con name=”miaform1” contenente -un radio button con tre opzioni:Bianco, Rosso, Verde --> <FORM name=\"miaform1\"> <input type=\"radio\" name=\"colori\" id=\"id_bianco\" value=\"bianco\"> <label for=\"id_bianco\">Bianco</label><br> <input type=\"radio\" name=\"colori\" id=\"id_rosso\" value=\"rosso\"> <label for=\"id_rosso\">Rosso</label><br> <input type=\"radio\" name=\"colori\" id=\"id_verde\" value=\"verde\"> <label for=\"id_verde\">Verde</label><br> <Button onclick=\"controlla_rb_usando_value();\">Controlla</Button> </FORM> </div> </body> </html> gestione di un radio button HTML in Javascript usando document.getElementById(id_opzione_radio_button).checked <!DOCTYPE HTML> <html> <head> <title>Test Radio</title> <script> function controlla_rb_usando_checked(){ var colore; // Controllo su checked per tutte le opzioni del radio button // //NB //non è necessario gestire il ramo else in quanto //a livello di HTML può essere selezionata una sola opzione // if (document.getElementById(\"id_bianco\").checked) { colore=\"bianco\"; } if(document.getElementById(\"id_rosso\").checked){ colore=\"rosso\"; } if(document.getElementById(\"id_verde\").checked){ colore=\"verde\"; } alert(\"Radio Button Colore = \"+colore); } </script> </head> <body> <h1>Test Radio Button</h1> <div> <!-- radio button con tre opzioni:Bianco, Rosso, Verde --> <FORM name=\"miaform1\"> <input type=\"radio\" name=\"colori\" id=\"id_bianco\" value=\"bianco\"> <label for=\"id_bianco\">Bianco</label><br> <input type=\"radio\" name=\"colori\" id=\"id_rosso\" value=\"rosso\"> <label for=\"id_rosso\">Rosso</label><br> <input type=\"radio\" name=\"colori\" id=\"id_verde\" value=\"verde\"> <label for=\"id_verde\">Verde</label><br> <Button onclick=\"controlla_rb_usando_checked();\">Controlla</Button> </FORM> </div> </body> </html>","libVersion":"0.0.0","langs":"","hash":"","size":0}